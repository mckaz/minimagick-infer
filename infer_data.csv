Class,Method,Inferred Type,Original Type,Source Code,Comments
[s]MiniMagick::Configuration,extended,(MiniMagick::Configuration) -> XXX,,"def self.extended(base)
      base.validate_on_create = true
      base.validate_on_write = true
      base.whiny = true
      base.shell_api = ""open3""
      base.logger = Logger.new($stdout).tap { |l| l.level = Logger::INFO }
    end",""
MiniMagick::Configuration,configure,() { (MiniMagick::Configuration) -> XXX } -> XXX,,"def configure
      yield self
    end","##
# @yield [self]
# @example
#   MiniMagick.configure do |config|
#     config.cli = :graphicsmagick
#     config.timeout = 5
#   end
#
"
MiniMagick::Configuration,processor,() -> String,,"def processor
      @processor ||= CLI_DETECTION.values.detect do |processor|
        MiniMagick::Utilities.which(processor)
      end
    end","# @private (for backwards compatibility)
"
MiniMagick::Configuration,processor=,([ to_s: () -> String ]) -> XXX,,"def processor=(processor)
      @processor = processor.to_s

      unless CLI_DETECTION.value?(@processor)
        raise ArgumentError,
          ""processor has to be set to either \""magick\"", \""mogrify\"" or \""gm\"""" \
          "", was set to #{@processor.inspect}""
      end
    end","# @private (for backwards compatibility)
"
MiniMagick::Configuration,cli=,([ inspect: () -> XXX ]) -> nil,,"def cli=(value)
      @cli = value

      if not CLI_DETECTION.key?(@cli)
        raise ArgumentError,
          ""CLI has to be set to either :imagemagick, :imagemagick7 or :graphicsmagick"" \
          "", was set to #{@cli.inspect}""
      end
    end","##
# Set whether you want to use [ImageMagick](http://www.imagemagick.org) or
# [GraphicsMagick](http://www.graphicsmagick.org).
#
"
MiniMagick::Configuration,debug=,(XXX) -> XXX,,"def debug=(value)
      warn ""MiniMagick.debug is deprecated and will be removed in MiniMagick 5. Use `MiniMagick.logger.level = Logger::DEBUG` instead.""
      logger.level = value ? Logger::DEBUG : Logger::INFO
    end","##
# When set to `true`, it outputs each command to STDOUT in their shell
# version.
#
"
MiniMagick::Configuration,reload_tools,() -> nil,,"def reload_tools
      warn ""MiniMagick.reload_tools is deprecated because it is no longer necessary""
    end","# Backwards compatibility
"
[s]MiniMagick::Image,read,"((IO or String), ?[ to_s: () -> String ]) -> XXX",,"def self.read(stream, ext = nil)
      if stream.is_a?(String)
        stream = StringIO.new(stream)
      end

      create(ext) { |file| IO.copy_stream(stream, file) }
    end","##
# This is the primary loading method used by all of the other class
# methods.
#
# Use this to pass in a stream object. Must respond to #read(size) or be a
# binary string object (BLOBBBB)
#
# Probably easier to use the {.open} method if you want to open a file or a
# URL.
#
# @param stream [#read, String] Some kind of stream object that needs
#   to be read or is a binary String blob
# @param ext [String] A manual extension to use for reading the file. Not
#   required, but if you are having issues, give this a try.
# @return [MiniMagick::Image]
#
"
[s]MiniMagick::Image,import_pixels,"(XXX, XXX, XXX, XXX, XXX, ?XXX) -> XXX",,"def self.import_pixels(blob, columns, rows, depth, map, format = 'png')
      # Create an image object with the raw pixel data string:
      create("".dat"", false) { |f| f.write(blob) }.tap do |image|
        output_path = image.path.sub(/\.\w+$/, "".#{format}"")
        # Use ImageMagick to convert the raw data file to an image file of the
        # desired format:
        MiniMagick::Tool::Convert.new do |convert|
          convert.size ""#{columns}x#{rows}""
          convert.depth depth
          convert << ""#{map}:#{image.path}""
          convert << output_path
        end

        image.path.replace output_path
      end
    end","##
# Creates an image object from a binary string blob which contains raw
# pixel data (i.e. no header data).
#
# @param blob [String] Binary string blob containing raw pixel data.
# @param columns [Integer] Number of columns.
# @param rows [Integer] Number of rows.
# @param depth [Integer] Bit depth of the encoded pixel data.
# @param map [String] A code for the mapping of the pixel data. Example:
#   'gray' or 'rgb'.
# @param format [String] The file extension of the image format to be
#   used when creating the image object.
# Defaults to 'png'.
# @return [MiniMagick::Image] The loaded image.
#
"
[s]MiniMagick::Image,create,"(?[ to_s: () -> String ], ?XXX) { XXX } -> XXX",,"def self.create(ext = nil, validate = MiniMagick.validate_on_create, &block)
      tempfile = MiniMagick::Utilities.tempfile(ext.to_s.downcase, &block)

      new(tempfile.path, tempfile).tap do |image|
        image.validate! if validate
      end
    end","##
# Used to create a new Image object data-copy. Not used to ""paint"" or
# that kind of thing.
#
# Takes an extension in a block and can be used to build a new Image
# object. Used by both {.open} and {.read} to create a new object. Ensures
# we have a good tempfile.
#
# @param ext [String] Specify the extension you want to read it as
# @param validate [Boolean] If false, skips validation of the created
#   image. Defaults to true.
# @yield [Tempfile] You can #write bits to this object to create the new
#   Image
# @return [MiniMagick::Image] The created image
#
"
MiniMagick::Image,initialize,"([ to_s: () -> String ], ?Tempfile) { XXX } -> self",,"def initialize(input_path, tempfile = nil, &block)
      @path = input_path.to_s
      @tempfile = tempfile
      @info = MiniMagick::Image::Info.new(@path)

      combine_options(&block) if block
    end","##
# Create a new {MiniMagick::Image} object.
#
# _DANGER_: The file location passed in here is the *working copy*. That
# is, it gets *modified*. You can either copy it yourself or use {.open}
# which creates a temporary file for you and protects your original.
#
# @param input_path [String, Pathname] The location of an image file
# @yield [MiniMagick::Tool::Mogrify] If block is given, {#combine_options}
#   is called.
#
"
MiniMagick::Image,==,([ signature: () -> XXX ]) -> (false or true),,"def ==(other)
      self.class == other.class && signature == other.signature
    end",""
MiniMagick::Image,hash,() -> XXX,,"def hash
      signature.hash
    end",""
MiniMagick::Image,to_blob,() -> String,,"def to_blob
      File.binread(path)
    end","##
# Returns raw image data.
#
# @return [String] Binary string
#
"
MiniMagick::Image,valid?,() -> (false or true),,"def valid?
      validate!
      true
    rescue MiniMagick::Invalid
      false
    end","##
# Checks to make sure that MiniMagick can read the file and understand it.
#
# This uses the 'identify' command line utility to check the file. If you
# are having issues with this, then please work directly with the
# 'identify' command and see if you can figure out what the issue is.
#
# @return [Boolean]
#
"
MiniMagick::Image,validate!,() -> XXX,,"def validate!
      identify
    rescue MiniMagick::Error => error
      raise MiniMagick::Invalid, error.message
    end","##
# Runs `identify` on the current image, and raises an error if it doesn't
# pass.
#
# @raise [MiniMagick::Invalid]
#
"
MiniMagick::Image,[],"([ to_s: () -> String ]) -> (Hash<String, String> or String)",,"def [](value)
      @info[value.to_s]
    end","##
# Use this method if you want to access raw Identify's format API.
#
# @example
#    image[""%w %h""]       #=> ""250 450""
#    image[""%r""]          #=> ""DirectClass sRGB""
#
# @param value [String]
# @see http://www.imagemagick.org/script/escape.php
# @return [String]
#
"
MiniMagick::Image,layers,() -> XXX,,"def layers
      layers_count = identify.lines.count
      layers_count.times.map do |idx|
        MiniMagick::Image.new(""#{path}[#{idx}]"")
      end
    end","##
# Returns layers of the image. For example, JPEGs are 1-layered, but
# formats like PSDs, GIFs and PDFs can have multiple layers/frames/pages.
#
# @example
#   image = MiniMagick::Image.new(""document.pdf"")
#   image.pages.each_with_index do |page, idx|
#     page.write(""page#{idx}.pdf"")
#   end
# @return [Array<MiniMagick::Image>]
#
"
MiniMagick::Image,get_pixels,() -> XXX,,"def get_pixels
      convert = MiniMagick::Tool::Convert.new
      convert << path
      convert.depth(8)
      convert << ""RGB:-""

      # Do not use `convert.call` here. We need the whole binary (unstripped) output here.
      shell = MiniMagick::Shell.new
      output, * = shell.run(convert.command)

      pixels_array = output.unpack(""C*"")
      pixels = pixels_array.each_slice(3).each_slice(width).to_a

      # deallocate large intermediary objects
      output.clear
      pixels_array.clear

      pixels
    end","##
# Returns a matrix of pixels from the image. The matrix is constructed as
# an array (1) of arrays (2) of arrays (3) of unsigned integers:
#
# 1) one for each row of pixels
# 2) one for each column of pixels
# 3) three elements in the range 0-255, one for each of the RGB color channels
#
# @example
#   img = MiniMagick::Image.open 'image.jpg'
#   pixels = img.get_pixels
#   pixels[3][2][1] # the green channel value from the 4th-row, 3rd-column pixel
#
# It can also be called after applying transformations:
#
# @example
#   img = MiniMagick::Image.open 'image.jpg'
#   img.crop '20x30+10+5'
#   img.colorspace 'Gray'
#   pixels = img.get_pixels
#
# In this example, all pixels in pix should now have equal R, G, and B values.
#
# @return [Array] Matrix of each color of each pixel
"
MiniMagick::Image,format,"(XXX, ?XXX, ?[ each: () {(XXX, XXX) -> XXX} -> XXX ]) { (([ <<: (XXX) -> XXX ] and [ send: (String, XXX) -> XXX ])) -> XXX } -> MiniMagick::Image",,"def format(format, page = 0, read_opts={})
      if @tempfile
        new_tempfile = MiniMagick::Utilities.tempfile("".#{format}"")
        new_path = new_tempfile.path
      else
        new_path = Pathname(path).sub_ext("".#{format}"").to_s
      end

      input_path = path.dup
      input_path << ""[#{page}]"" if page && !layer?

      MiniMagick::Tool::Convert.new do |convert|
        read_opts.each do |opt, val|
          convert.send(opt.to_s, val)
        end
        convert << input_path
        yield convert if block_given?
        convert << new_path
      end

      if @tempfile
        destroy!
        @tempfile = new_tempfile
      else
        File.delete(path) unless path == new_path || layer?
      end

      path.replace new_path
      @info.clear

      self
    end","##
# This is used to change the format of the image. That is, from ""tiff to
# jpg"" or something like that. Once you run it, the instance is pointing to
# a new file with a new extension!
#
# *DANGER*: This renames the file that the instance is pointing to. So, if
# you manually opened the file with Image.new(file_path)... Then that file
# is DELETED! If you used Image.open(file) then you are OK. The original
# file will still be there. But, any changes to it might not be...
#
# Formatting an animation into a non-animated type will result in
# ImageMagick creating multiple pages (starting with 0).  You can choose
# which page you want to manipulate.  We default to the first page.
#
# If you would like to convert between animated formats, pass nil as your
# page and ImageMagick will copy all of the pages.
#
# @param format [String] The target format... Like 'jpg', 'gif', 'tiff' etc.
# @param page [Integer] If this is an animated gif, say which 'page' you
#   want with an integer. Default 0 will convert only the first page; 'nil'
#   will convert all pages.
# @param read_opts [Hash] Any read options to be passed to ImageMagick
#   for example: image.format('jpg', page, {density: '300'})
# @yield [MiniMagick::Tool::Convert] It optionally yields the command,
#   if you want to add something.
# @return [self]
#
"
MiniMagick::Image,combine_options,() { XXX } -> MiniMagick::Image,,"def combine_options(&block)
      mogrify(&block)
    end","##
# You can use multiple commands together using this method. Very easy to
# use!
#
# @example
#   image.combine_options do |c|
#     c.draw ""image Over 0,0 10,10 '#{MINUS_IMAGE_PATH}'""
#     c.thumbnail ""300x500>""
#     c.background ""blue""
#   end
#
# @yield [MiniMagick::Tool::Mogrify]
# @see http://www.imagemagick.org/script/mogrify.php
# @return [self]
#
"
MiniMagick::Image,method_missing,"(String, *XXX) -> MiniMagick::Image",,"def method_missing(name, *args)
      mogrify do |builder|
        builder.send(name, *args)
      end
    end","##
# If an unknown method is called then it is sent through the mogrify
# program.
#
# @see http://www.imagemagick.org/script/mogrify.php
# @return [self]
#
"
MiniMagick::Image,respond_to_missing?,"(String, ?XXX) -> (false or true)",,"def respond_to_missing?(method_name, include_private = false)
      MiniMagick::Tool::Mogrify.option_methods.include?(method_name.to_s)
    end",""
MiniMagick::Image,write,((IO or String)) -> Number,,"def write(output_to)
      case output_to
      when String, Pathname
        if layer?
          MiniMagick::Tool::Convert.new do |builder|
            builder << path
            builder << output_to
          end
        else
          FileUtils.copy_file path, output_to unless path == output_to.to_s
        end
      else
        IO.copy_stream File.open(path, ""rb""), output_to
      end
    end","##
# Writes the temporary file out to either a file location (by passing in a
# String) or by passing in a Stream that you can #write(chunk) to
# repeatedly
#
# @param output_to [String, Pathname, #read] Some kind of stream object
#   that needs to be read or a file path as a String
#
"
MiniMagick::Image,composite,"([ path: () -> XXX ], ?XXX, ?[ path: () -> XXX ]) { ([ <<: (XXX) -> XXX ]) -> XXX } -> MiniMagick::Image",,"def composite(other_image, output_extension = type.downcase, mask = nil)
      output_tempfile = MiniMagick::Utilities.tempfile("".#{output_extension}"")

      MiniMagick::Tool::Composite.new do |composite|
        yield composite if block_given?
        composite << other_image.path
        composite << path
        composite << mask.path if mask
        composite << output_tempfile.path
      end

      Image.new(output_tempfile.path, output_tempfile)
    end","##
# @example
#  first_image = MiniMagick::Image.open ""first.jpg""
#  second_image = MiniMagick::Image.open ""second.jpg""
#  result = first_image.composite(second_image) do |c|
#    c.compose ""Over"" # OverCompositeOp
#    c.geometry ""+20+20"" # copy second_image onto first_image from (20, 20)
#  end
#  result.write ""output.jpg""
#
# @see http://www.imagemagick.org/script/composite.php
#
"
MiniMagick::Image,collapse!,(?XXX) -> MiniMagick::Image,,"def collapse!(frame = 0)
      mogrify(frame) { |builder| builder.quality(100) }
    end","##
# Collapse images with sequences to the first frame (i.e. animated gifs) and
# preserve quality.
#
# @param frame [Integer] The frame to which to collapse to, defaults to `0`.
# @return [self]
#
"
MiniMagick::Image,destroy!,() -> nil,,"def destroy!
      if @tempfile
        FileUtils.rm_f @tempfile.path.sub(/mpc$/, ""cache"") if @tempfile.path.end_with?("".mpc"")
        @tempfile.unlink
      end
    end","##
# Destroys the tempfile (created by {.open}) if it exists.
#
"
MiniMagick::Image,identify,() { ([ <<: (XXX) -> XXX ]) -> XXX } -> XXX,,"def identify
      MiniMagick::Tool::Identify.new do |builder|
        yield builder if block_given?
        builder << path
      end
    end","##
# Runs `identify` on itself. Accepts an optional block for adding more
# options to `identify`.
#
# @example
#   image = MiniMagick::Image.open(""image.jpg"")
#   image.identify do |b|
#     b.verbose
#   end # runs `identify -verbose image.jpg`
# @return [String] Output from `identify`
# @yield [MiniMagick::Tool::Identify]
#
"
MiniMagick::Image,run_command,"((String or Symbol), *XXX) -> XXX",,"def run_command(tool_name, *args)
      RDL.type_cast(MiniMagick::Tool.const_get(tool_name.capitalize), '[s]MiniMagick::Tool').new do |builder|
        args.each do |arg|
          builder << arg
        end
      end
    end","# @private
"
MiniMagick::Image,mogrify,"(?XXX) { (([ <<: ((String or XXX)) -> XXX ] and [ quality: (Number) -> XXX ] and [ send: (XXX, *XXX) -> XXX ])) -> XXX } -> MiniMagick::Image",,"def mogrify(page = nil)
      MiniMagick::Tool::MogrifyRestricted.new do |builder|
        yield builder if block_given?
        builder << (page ? ""#{path}[#{page}]"" : path)
      end

      @info.clear

      self
    end",""
MiniMagick::Image,layer?,() -> (false or true),,"def layer?
      path =~ /\[\d+\]$/
    end",""
MiniMagick::Image,landscape?,() -> (false or true),,"def landscape?
      width > height
    end","##
# Compares if image width
# is greater than height
# ============
# |          |
# |          |
# ============
# @return [Boolean]
"
MiniMagick::Image,portrait?,() -> (false or true),,"def portrait?
      height > width
    end","##
# Compares if image height
# is greater than width
# ======
# |    |
# |    |
# |    |
# |    |
# ======
# @return [Boolean]
"
MiniMagick::Shell,run,"(([ first: () -> XXX ] and [ join: (String) -> XXX ]), ?([ []: (:stderr) -> XXX ] and [ []: (:stdin) -> XXX ] and [ fetch: (:whiny, XXX) -> XXX ])) -> [XXX, XXX, XXX]",,"def run(command, options = {})
      stdout, stderr, status = execute(command, stdin: options[:stdin])

      if status != 0 && options.fetch(:whiny, MiniMagick.whiny)
        fail MiniMagick::Error, ""`#{command.join("" "")}` failed with error:\n#{stderr}""
      end

      $stderr.print(stderr) unless options[:stderr] == false

      [stdout, stderr, status]
    end",""
MiniMagick::Shell,execute,"(([ first: () -> XXX ] and [ join: (String) -> XXX ]), ?XXX) -> [String, String, Number]",,"def execute(command, options = {})
      stdout, stderr, status =
        log(command.join("" "")) do
          send(""execute_#{MiniMagick.shell_api.gsub(""-"", ""_"")}"", command, options)
        end

      [stdout, stderr, status.exitstatus]
    rescue Errno::ENOENT, IOError
      ["""", ""executable not found: \""#{command.first}\"""", 127]
    end",""
MiniMagick::Shell,log,(XXX) { XXX } -> XXX,,"def log(command, &block)
      value = nil
      duration = Benchmark.realtime { value = block.call }
      MiniMagick.logger.debug ""[%.2fs] %s"" % [duration, command]
      value
    end",""
MiniMagick::Tool,initialize,"(String, ?[ is_a?: (Class) -> XXX ]) -> self",,"def initialize(name, options = {})
      warn ""MiniMagick::Tool.new(false) is deprecated and will be removed in MiniMagick 5, use MiniMagick::Tool.new(whiny: false) instead."" if !options.is_a?(Hash)

      @name  = name
      @args  = []
      @whiny = options.is_a?(Hash) ? RDL.type_cast(options, ""Hash<Symbol, %bool>"").fetch(:whiny, MiniMagick.whiny) : options
    end","# @param whiny [Boolean] Whether to raise errors on exit codes different
#   than 0.
# @example
#   MiniMagick::Tool::Identify.new(whiny: false) do |identify|
#     identify.help # returns exit status 1, which would otherwise throw an error
#   end
"
MiniMagick::Tool,call,"(*XXX) { ([ chomp: (String) -> XXX ], XXX, XXX) -> XXX } -> XXX",,"def call(*args)
      options = args[-1].is_a?(Hash) ? args.pop : {}
      warn ""Passing whiny to MiniMagick::Tool#call is deprecated and will be removed in MiniMagick 5, use MiniMagick::Tool.new(whiny: false) instead."" if args.any?
      whiny = args.fetch(0, @whiny)

      options[:whiny] = whiny
      options[:stderr] = false if block_given?

      shell = MiniMagick::Shell.new
      stdout, stderr, status = shell.run(command, options)
      yield stdout, stderr, status if block_given?

      stdout.chomp(""\n"")
    end","##
# Executes the command that has been built up.
#
# @example
#   mogrify = MiniMagick::Tool::Mogrify.new
#   mogrify.resize(""500x500"")
#   mogrify << ""path/to/image.jpg""
#   mogrify.call # executes `mogrify -resize 500x500 path/to/image.jpg`
#
# @example
#   mogrify = MiniMagick::Tool::Mogrify.new
#   # build the command
#   mogrify.call do |stdout, stderr, status|
#     # ...
#   end
#
# @yield [Array] Optionally yields stdout, stderr, and exit status
#
# @return [String] Returns the output of the command
#
"
MiniMagick::Tool,command,"() -> [String, XXX]",,"def command
      [*executable, *args]
    end","##
# The currently built-up command.
#
# @return [Array<String>]
#
# @example
#   mogrify = MiniMagick::Tool::Mogrify.new
#   mogrify.resize ""500x500""
#   mogrify.contrast
#   mogrify.command #=> [""mogrify"", ""-resize"", ""500x500"", ""-contrast""]
#
"
MiniMagick::Tool,executable,() -> Array<String>,,"def executable
      exe = [name]
      exe.unshift ""magick"" if MiniMagick.imagemagick7? && name != ""magick""
      exe.unshift ""gm"" if MiniMagick.graphicsmagick?
      exe.unshift File.join(MiniMagick.cli_path, exe.shift) if MiniMagick.cli_path
      Array(MiniMagick.cli_prefix).reverse_each { |p| exe.unshift p } if MiniMagick.cli_prefix
      exe
    end","##
# The executable used for this tool. Respects
# {MiniMagick::Configuration#cli}, {MiniMagick::Configuration#cli_path},
# and {MiniMagick::Configuration#cli_prefix}.
#
# @return [Array<String>]
#
# @example
#   MiniMagick.configure { |config| config.cli = :graphicsmagick }
#   identify = MiniMagick::Tool::Identify.new
#   identify.executable #=> [""gm"", ""identify""]
#
# @example
#   MiniMagick.configure do |config|
#     config.cli = :graphicsmagick
#     config.cli_prefix = ['firejail', '--force']
#   end
#   identify = MiniMagick::Tool::Identify.new
#   identify.executable #=> [""firejail"", ""--force"", ""gm"", ""identify""]
#
"
MiniMagick::Tool,<<,([ to_s: () -> String ]) -> MiniMagick::Tool,,"def <<(arg)
      args << arg.to_s
      self
    end","##
# Appends raw options, useful for appending image paths.
#
# @return [self]
#
"
MiniMagick::Tool,merge!,([ each: () {(XXX) -> XXX} -> XXX ]) -> MiniMagick::Tool,,"def merge!(new_args)
      new_args.each { |arg| self << arg }
      self
    end","##
# Merges a list of raw options.
#
# @return [self]
#
"
MiniMagick::Tool,+,(*XXX) -> MiniMagick::Tool,,"def +(*values)
      args[-1] = args[-1].sub(/^-/, '+')
      self.merge!(values)
      self
    end","##
# Changes the last operator to its ""plus"" form.
#
# @example
#   MiniMagick::Tool::Mogrify.new do |mogrify|
#     mogrify.antialias.+
#     mogrify.distort.+(""Perspective"", ""0,0,4,5 89,0,45,46"")
#   end
#   # executes `mogrify +antialias +distort Perspective '0,0,4,5 89,0,45,46'`
#
# @return [self]
#
"
MiniMagick::Tool,stack,() { (MiniMagick::Tool) -> XXX } -> MiniMagick::Tool,,"def stack
      self << ""(""
      yield self
      self << "")""
    end","##
# Create an ImageMagick stack in the command (surround.
#
# @example
#   MiniMagick::Tool::Convert.new do |convert|
#     convert << ""wand.gif""
#     convert.stack do |stack|
#       stack << ""wand.gif""
#       stack.rotate(30)
#     end
#     convert.append.+
#     convert << ""images.gif""
#   end
#   # executes `convert wand.gif \( wizard.gif -rotate 30 \) +append images.gif`
#
"
MiniMagick::Tool,stdin,() -> MiniMagick::Tool,,"def stdin
      self << ""-""
    end","##
# Adds ImageMagick's pseudo-filename `-` for standard input.
#
# @example
#   identify = MiniMagick::Tool::Identify.new
#   identify.stdin
#   identify.call(stdin: image_content)
#   # executes `identify -` with the given standard input
#
"
MiniMagick::Tool,stdout,() -> MiniMagick::Tool,,"def stdout
      self << ""-""
    end","##
# Adds ImageMagick's pseudo-filename `-` for standard output.
#
# @example
#   content = MiniMagick::Tool::Convert.new do |convert|
#     convert << ""input.jpg""
#     convert.auto_orient
#     convert.stdout
#   end
#   # executes `convert input.jpg -auto-orient -` which returns file contents
#
"
MiniMagick::Tool,clone,(*XXX) -> MiniMagick::Tool,,"def clone(*args)
      self << '-clone'
      self.merge!(args)
      self
    end","##
# This option is a valid ImageMagick option, but it's also a Ruby method,
# so we need to override it so that it correctly acts as an option method.
#
"
MiniMagick::Tool,method_missing,"(String, *XXX) -> MiniMagick::Tool",,"def method_missing(name, *args)
      option = ""-#{name.to_s.tr('_', '-')}""
      self << option
      self.merge!(args)
      self
    end","##
# Any undefined method will be transformed into a CLI option
#
#   mogrify = MiniMagick::Tool.new(""mogrify"")
#   mogrify.adaptive_blur(""..."")
#   mogrify.foo_bar
#   mogrify.command.join("" "") ""mogrify -adaptive-blur ... -foo-bar""
#
"
[s]MiniMagick::Tool,option_methods,() -> (XXX or XXX),,"def self.option_methods
      @option_methods ||= (
        tool = new(whiny: false)
        tool << ""-help""
        help_page = tool.call(stderr: false)

        cli_options = help_page.scan(/^\s+-[a-z\-]+/).map(&:strip)
        if tool.name == ""mogrify"" && MiniMagick.graphicsmagick?
          # These options were undocumented before 2015-06-14 (see gm bug 302)
          cli_options |= %w[-box -convolve -gravity -linewidth -mattecolor -render -shave]
        end

        cli_options.map { |o| o[1..-1].tr('-','_') }
      )
    end",""
MiniMagick::Utilities,which,(XXX) -> String,,"def which(cmd)
      exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
      ENV.fetch('PATH').split(File::PATH_SEPARATOR).each do |path|
        exts.each do |ext|
          exe = File.join(path, ""#{cmd}#{ext}"")
          return exe if File.executable? exe
        end
      end
      nil
    end","##
# Cross-platform way of finding an executable in the $PATH.
#
# @example
#   MiniMagick::Utilities.which('ruby') #=> ""/usr/bin/ruby""
#
"
[s]MiniMagick,version,() -> XXX,,"def self.version
    Gem::Version.new VERSION::STRING
  end","##
# @return [Gem::Version]
#
"
MiniMagick::Image::Info,initialize,(String) -> self,,"def initialize(path)
        @path = path
        @info = {}
      end",""
MiniMagick::Image::Info,[],"(String, *XXX) -> (Hash<String, String> or String)",,"def [](value, *args)
        case value
        when ""format"", ""width"", ""height"", ""dimensions"", ""size"", ""human_size""
          cheap_info(value)
        when ""colorspace""
          colorspace
        when ""mime_type""
          mime_type
        when ""resolution""
          resolution(*args)
        when ""signature""
          signature
        when /^EXIF\:/i
          raw_exif(value)
        when ""exif""
          exif
        when ""details""
          details
        when ""data""
          data
        else
          raw(value)
        end
      end",""
MiniMagick::Image::Info,clear,"() -> Hash<String, (Hash<String, String> or String)>",,"def clear
        @info.clear
      end",""
MiniMagick::Image::Info,cheap_info,(String) -> XXX,,"def cheap_info(value)
        @info.fetch(value) do
          format, width, height, size = RDL.type_cast(self[""%m %w %h %b""], ""String"").split("" "")

          path = @path
          path = path.match(/\[\d+\]$/).pre_match if path =~ /\[\d+\]$/

          @info.update(
            ""format""     => format,
            ""width""      => Integer(width),
            ""height""     => Integer(height),
            ""dimensions"" => [Integer(width), Integer(height)],
            ""size""       => File.size(path),
            ""human_size"" => size,
          )

          @info.fetch(value)
        end
      rescue ArgumentError, TypeError
        raise MiniMagick::Invalid, ""image data can't be read""
      end",""
MiniMagick::Image::Info,colorspace,"() -> (Hash<String, String> or String)",,"def colorspace
        @info[""colorspace""] ||= self[""%r""]
      end",""
MiniMagick::Image::Info,mime_type,() -> String,,"def mime_type
        ""image/#{RDL.type_cast(self[""format""], ""String"").downcase}""
      end",""
MiniMagick::Image::Info,resolution,(?XXX) -> XXX,,"def resolution(unit = nil)
        output = identify do |b|
          b.units unit if unit
          b.format ""%x %y""
        end
        output.split("" "").map(&:to_i)
      end",""
MiniMagick::Image::Info,raw_exif,"(XXX) -> (Hash<String, String> or String)",,"def raw_exif(value)
        self[""%[#{value}]""]
      end",""
MiniMagick::Image::Info,exif,() -> XXX,,"def exif
        @info[""exif""] ||= (
          hash = {}
          output = RDL.type_cast(self[""%[EXIF:*]""], ""String"")

          output.each_line do |line|
            line = line.chomp(""\n"")

            case MiniMagick.cli
            when :imagemagick, :imagemagick7
              if match = line.match(/^exif:/)
                key, value = match.post_match.split(""="", 2)
                value = decode_comma_separated_ascii_characters(value) if ASCII_ENCODED_EXIF_KEYS.include?(key)
                hash[key] = value
              else
                hash[hash.keys.last] << ""\n#{line}""
              end
            when :graphicsmagick
              next if line == ""unknown""
              key, value = line.split(""="", 2)
              value.gsub!(""\\012"", ""\n"") # convert ""\012"" characters to newlines
              hash[key] = value
            end
          end

          hash
        )
      end",""
MiniMagick::Image::Info,raw,(XXX) -> XXX,,"def raw(value)
        @info[""raw:#{value}""] ||= identify { |b| b.format(value) }
      end",""
MiniMagick::Image::Info,signature,() -> XXX,,"def signature
        @info[""signature""] ||= self[""%#""]
      end",""
MiniMagick::Image::Info,data,() -> XXX,,"def data
        raise Error, ""MiniMagick::Image#data isn't supported on GraphicsMagick. Use MiniMagick::Image#details instead."" if MiniMagick.graphicsmagick?

        @info[""data""] ||= (
          json = MiniMagick::Tool::Convert.new do |convert|
            convert << path
            convert << ""json:""
          end

          data = JSON.parse(json)
          data = data.fetch(0) if data.is_a?(Array)
          data.fetch(""image"")
        )
      end",""
MiniMagick::Image::Info,identify,() { (([ <<: (XXX) -> XXX ] and [ format: (String) -> XXX ] and [ units: (XXX) -> XXX ])) -> XXX } -> XXX,,"def identify
        MiniMagick::Tool::Identify.new do |builder|
          yield builder if block_given?
          builder << path
        end
      end",""
MiniMagick::Image::Info,decode_comma_separated_ascii_characters,(String) -> String,,"def decode_comma_separated_ascii_characters(encoded_value)
        return encoded_value unless encoded_value.include?(',')
        RDL.type_cast(encoded_value.scan(/\d+/).map(&:to_i).map(&:chr), ""Array<String>"").join
      end",""
MiniMagick::Image::Info,path,() -> String,,"def path
        value = @path
        value += ""[0]"" unless value =~ /\[\d+\]$/
        value
      end",""
MiniMagick::Tool::Compare,initialize,(*XXX) -> self,,"def initialize(*args)
        super(""compare"", *args)
      end",""
MiniMagick::Tool::Mogrify,initialize,(*XXX) -> self,,"def initialize(*args)
        super(""mogrify"", *args)
      end",""
MiniMagick::Tool::MogrifyRestricted,format,(*XXX) -> XXX,,"def format(*args)
        fail NoMethodError,
          ""you must call #format on a MiniMagick::Image directly""
      end",""
MiniMagick::Tool::Identify,initialize,(*XXX) -> self,,"def initialize(*args)
        super(""identify"", *args)
      end",""
MiniMagick::Tool::Montage,initialize,(*XXX) -> self,,"def initialize(*args)
        super(""montage"", *args)
      end",""
MiniMagick::Tool::Composite,initialize,(*XXX) -> self,,"def initialize(*args)
        super(""composite"", *args)
      end",""
MiniMagick::Tool::Magick,initialize,(*XXX) -> self,,"def initialize(*args)
        super(""magick"", *args)
      end",""
MiniMagick::Tool::Display,initialize,(*XXX) -> self,,"def initialize(*args)
        super(""display"", *args)
      end",""
MiniMagick::Tool::Stream,initialize,(*XXX) -> self,,"def initialize(*args)
        super(""stream"", *args)
      end",""
MiniMagick::Tool::Convert,initialize,(*XXX) -> self,,"def initialize(*args)
        super(""convert"", *args)
      end",""
MiniMagick::Tool::Conjure,initialize,(*XXX) -> self,,"def initialize(*args)
        super(""conjure"", *args)
      end",""
MiniMagick::Tool::Import,initialize,(*XXX) -> self,,"def initialize(*args)
        super(""import"", *args)
      end",""
MiniMagick::Tool::Animate,initialize,(*XXX) -> self,,"def initialize(*args)
        super(""animate"", *args)
      end",""
